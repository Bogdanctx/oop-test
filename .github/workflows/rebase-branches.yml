name: Automatic rebase branches

on:
  workflow_dispatch:
    inputs:
      base_branch:
        description: "Branch to rebase onto"
        required: false # daca nu e specificat, se face rebase pe toate branch-urile

permissions:
  contents: write

jobs:
  rebase:
    # renovate: depName=ubuntu
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        # renovate: datasource=github-tags depName=actions/checkout versioning=loose
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Read config file
        id: config
        run: |
          BRANCHES=$(jq -c .github/rebase-branches.json)
          echo "BRANCHES=$BRANCHES" >> $GITHUB_ENV
          echo "Branches to rebase: $BRANCHES"

      - name: Test
        run: |
          echo "Branches from config: ${{ env.BRANCHES }}"


      # - name: Fetch branches
      #   run: |
      #     git fetch origin

      #     if [[ -n ${{ github.event.inputs.base_branch }} ]]; then
      #       SPECIFIED_BRANCH="${{ github.event.inputs.base_branch }}"
      #       echo "${SPECIFIED_BRANCH}" > branches.txt
      #     else
      #       git branch -r | grep 'origin/' | grep -v "origin/HEAD" | grep -v "origin/$BASE" | sed 's#origin/##' > branches.txt
      #     fi
          
      #     echo "Branches used for rebase:"
      #     cat branches.txt

      # - name: Rebase onto ${{ env.BASE }}
      #   continue-on-error: true # in caz de conflict sa nu se opreasca
      #   run: |
      #     while read -r BRANCH; do
      #       echo "Rebasing branch: $BRANCH"
      #       git checkout -B "$BRANCH" "origin/$BRANCH"
      #       if git rebase "origin/${{ env.BASE }}"; then
      #         git push origin "$BRANCH" --force-with-lease
      #         echo "Rebased and pushed $BRANCH"
      #       else
      #         echo "Conflict on $BRANCH"
      #         git rebase --abort
      #       fi
      #       echo "-----------------------------------"
      #     done <<< "$(cat branches.txt)"